@page "/"
@rendermode InteractiveServer
@using Tailmail.Web.Services
@inject MessageStore MessageStore
@implements IDisposable

<PageTitle>Tailmail</PageTitle>

<h1>Tailmail Messages</h1>

@if (!messages.Any())
{
    <p>No messages yet. Send a message using the CLI!</p>
}
else
{
    <div class="messages">
        @foreach (var message in messages)
        {
            <div class="message-card">
                <div class="message-header">
                    <strong>@message.Sender</strong>
                    <span class="timestamp">@FormatTimestamp(message.Timestamp)</span>
                </div>
                <div class="message-content">@message.Content</div>
            </div>
        }
    </div>
}

@code {
    private List<Tailmail.Protos.MessageRequest> messages = new();

    protected override void OnInitialized()
    {
        LoadMessages();
        MessageStore.OnMessageAdded += OnMessageReceived;
    }

    private void OnMessageReceived()
    {
        InvokeAsync(() =>
        {
            LoadMessages();
            StateHasChanged();
        });
    }

    private void LoadMessages()
    {
        messages = MessageStore.GetMessages().ToList();
    }

    private string FormatTimestamp(long timestamp)
    {
        var dt = DateTimeOffset.FromUnixTimeSeconds(timestamp).ToLocalTime();
        return dt.ToString("yyyy-MM-dd HH:mm:ss");
    }

    public void Dispose()
    {
        MessageStore.OnMessageAdded -= OnMessageReceived;
    }
}

<style>
    .messages {
        margin-top: 20px;
    }

    .message-card {
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 15px;
        margin-bottom: 10px;
        background-color: #f9f9f9;
    }

    .message-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
        font-size: 14px;
    }

    .timestamp {
        color: #666;
    }

    .message-content {
        font-size: 16px;
    }
</style>
