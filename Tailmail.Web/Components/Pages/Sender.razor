@page "/sender/{SenderName}"
@rendermode InteractiveServer
@using Tailmail.Web.Services
@inject MessageStore MessageStore
@inject SentMessageStore SentMessageStore
@inject MessageSender MessageSender
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>@SenderName - Tailmail</PageTitle>

<div class="chat-container">
    <div class="chat-header">
        <h1>Messages from @SenderName</h1>
    </div>

    <div class="messages-container">
        @if (!allMessages.Any())
        {
            <p>No messages with @SenderName yet.</p>
        }
        else
        {
            <div class="messages">
                @foreach (var message in allMessages)
                {
                    var isSent = message.Recipient == SenderName;
                    var hasError = !string.IsNullOrEmpty(message.ErrorMessage);
                    <div class="message-card @(isSent ? "sent" : "received")">
                        <div class="message-header">
                            <strong>@message.Sender</strong>
                        </div>
                        <div class="message-content @(hasError ? "error" : "")">
                            @message.Content
                        </div>
                        @if (hasError)
                        {
                            <div class="error-message">@message.ErrorMessage</div>
                        }
                        <span class="timestamp-popup">@FormatTimestamp(message.Timestamp)</span>
                    </div>
                }
                <div @ref="messagesEnd"></div>
            </div>
        }
    </div>

    <div class="reply-section">
        <textarea class="reply-input"
                  value="@replyMessage"
                  @oninput="@(e => replyMessage = e.Value?.ToString() ?? string.Empty)"
                  @onkeydown="HandleKeyDown"
                  @onkeydown:preventDefault="@shouldPreventDefault"
                  placeholder="Type your message to @SenderName..."></textarea>
        <button class="send-button" @onclick="SendMessage">Send</button>
    </div>
</div>

@code {
    [Parameter]
    public string SenderName { get; set; } = string.Empty;

    private List<Tailmail.Protos.MessageRequest> allMessages = new();
    private string replyMessage = string.Empty;
    private ElementReference messagesEnd;
    private bool shouldPreventDefault = false;

    protected override void OnInitialized()
    {
        LoadMessages();
        MessageStore.OnMessageAdded += OnMessageReceived;
        SentMessageStore.OnMessageAdded += OnMessageReceived;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await ScrollToBottom();
    }

    protected override void OnParametersSet()
    {
        LoadMessages();
    }

    private void OnMessageReceived()
    {
        InvokeAsync(async () =>
        {
            LoadMessages();
            StateHasChanged();
            await ScrollToBottom();
        });
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("scrollToBottom", messagesEnd);
        }
        catch
        {
            // Ignore errors if JS interop isn't ready yet
        }
    }

    private void LoadMessages()
    {
        // Get received messages from this sender
        var receivedMessages = MessageStore.GetMessages()
            .Where(m => m.Sender == SenderName);

        // Get sent messages to this sender
        var sentMessages = SentMessageStore.GetMessages()
            .Where(m => m.Recipient == SenderName);

        // Merge and sort by timestamp
        allMessages = receivedMessages
            .Concat(sentMessages)
            .OrderBy(m => m.Timestamp)
            .ToList();
    }

    private string FormatTimestamp(long timestamp)
    {
        var dt = DateTimeOffset.FromUnixTimeSeconds(timestamp).ToLocalTime();
        return dt.ToString("yyyy-MM-dd HH:mm:ss");
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        shouldPreventDefault = e.Key == "Enter" && !e.ShiftKey;

        if (shouldPreventDefault)
        {
            await SendMessage();
        }
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(replyMessage))
        {
            var success = await MessageSender.SendMessageToPeer(SenderName, replyMessage);

            if (success)
            {
                replyMessage = string.Empty;
                await ScrollToBottom();
            }
            else
            {
                // TODO: Show error message to user
            }
        }
    }

    public void Dispose()
    {
        MessageStore.OnMessageAdded -= OnMessageReceived;
        SentMessageStore.OnMessageAdded -= OnMessageReceived;
    }
}

<style>
    .chat-container {
        display: flex;
        flex-direction: column;
        height: calc(100vh - 3.5rem);
        position: fixed;
        top: 3.5rem;
        left: 250px;
        right: 0;
        bottom: 0;
    }

    @@media (max-width: 767.98px) {
        .chat-container {
            left: 0;
        }
    }

    .chat-header {
        padding: 1rem;
        border-bottom: 1px solid #ddd;
        background-color: white;
    }

    .chat-header h1 {
        margin: 0;
        font-size: 1.5rem;
    }

    .messages-container {
        flex: 1;
        overflow-y: auto;
        padding: 1rem;
        background-color: white;
    }

    .messages {
        display: flex;
        flex-direction: column;
    }

    .message-card {
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 15px;
        margin-bottom: 10px;
        max-width: 70%;
        min-width: 200px;
        position: relative;
    }

    .message-card.received {
        background-color: #f9f9f9;
        align-self: flex-start;
        margin-right: auto;
    }

    .message-card.sent {
        background-color: #d4edff;
        align-self: flex-end;
        margin-left: auto;
    }

    .message-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
        font-size: 14px;
    }

    .timestamp-popup {
        position: absolute;
        top: 5px;
        left: 50%;
        transform: translateX(-50%);
        background-color: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 12px;
        white-space: nowrap;
        opacity: 0;
        pointer-events: none;
        transition: opacity 0.2s;
    }

    .message-card:hover .timestamp-popup {
        opacity: 1;
    }

    .message-content {
        font-size: 16px;
    }

    .message-content.error {
        font-style: italic;
    }

    .error-message {
        font-size: 12px;
        color: #dc3545;
        font-style: italic;
        margin-top: 5px;
    }

    .reply-section {
        padding: 15px;
        border-top: 1px solid #ddd;
        background-color: white;
        display: flex;
        gap: 10px;
    }

    .reply-input {
        flex: 1;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 5px;
        font-size: 16px;
        resize: vertical;
        min-height: 60px;
        max-height: 120px;
    }

    .send-button {
        padding: 10px 20px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        align-self: flex-start;
    }

    .send-button:hover {
        background-color: #0056b3;
    }
</style>
