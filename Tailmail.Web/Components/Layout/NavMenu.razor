@rendermode InteractiveServer
@using Tailmail.Web.Services
@inject MessageStore MessageStore
@inject SettingsService SettingsService
@implements IDisposable

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Tailmail.Web</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> All
            </NavLink>
        </div>

        @foreach (var peer in knownPeers)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="@($"sender/{Uri.EscapeDataString(peer)}")">
                    <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @peer
                </NavLink>
            </div>
        }

        @foreach (var sender in unknownSenders)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="@($"sender/{Uri.EscapeDataString(sender)}")">
                    <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @sender*
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private List<string> knownPeers = new();
    private List<string> unknownSenders = new();

    protected override void OnInitialized()
    {
        LoadNavItems();
        MessageStore.OnMessageAdded += OnDataChanged;
        SettingsService.OnSettingsChanged += OnDataChanged;
    }

    private void OnDataChanged()
    {
        InvokeAsync(() =>
        {
            LoadNavItems();
            StateHasChanged();
        });
    }

    private void LoadNavItems()
    {
        // Get all peer names from settings
        var peerNames = SettingsService.GetSettings().Peers
            .Select(p => p.UserName ?? string.Empty)
            .Where(n => !string.IsNullOrWhiteSpace(n))
            .Distinct()
            .OrderBy(n => n)
            .ToList();

        // Get all senders from messages
        var messageSenders = MessageStore.GetMessages()
            .Select(m => m.Sender ?? string.Empty)
            .Where(s => !string.IsNullOrWhiteSpace(s))
            .Distinct()
            .ToHashSet();

        // Known peers (all peers from settings)
        knownPeers = peerNames;

        // Unknown senders (senders from messages that don't match any peer)
        unknownSenders = messageSenders
            .Where(s => !peerNames.Contains(s))
            .OrderBy(s => s)
            .ToList();
    }

    public void Dispose()
    {
        MessageStore.OnMessageAdded -= OnDataChanged;
        SettingsService.OnSettingsChanged -= OnDataChanged;
    }
}
